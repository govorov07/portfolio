class PageBuilder {
    constructor() {
        this.templates = {};
        this.currentPage = null;
        this.templatesBasePath = 'assets/templates/'; // ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å
        this.dataBasePath = 'data/'; // ‚úÖ –ü—É—Ç—å –∫ –¥–∞–Ω–Ω—ã–º
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —à–∞–±–ª–æ–Ω–æ–≤
    async loadTemplates() {
        const templateFiles = [
            'base.html', 
            'sidebar.html', 
            'search.html', 
            'navigation.html', 
            'content.html',
            'components/header.html', 
            'components/table.html',
            'components/note.html', 
            'components/section.html'
        ];

        const loadPromises = templateFiles.map(async (file) => {
            try {
                const response = await fetch(`${this.templatesBasePath}${file}`);
                if (!response.ok) throw new Error(`HTTP ${response.status}`);
                this.templates[file] = await response.text();
            } catch (error) {
                console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–∞ ${file}:`, error);
                this.templates[file] = `<div class="error">–®–∞–±–ª–æ–Ω ${file} –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω</div>`;
            }
        });

        await Promise.all(loadPromises);
    }

    // –†–µ–Ω–¥–µ—Ä —à–∞–±–ª–æ–Ω–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
    renderTemplate(templateName, data = {}) {
        if (!this.templates[templateName]) {
            console.error(`–®–∞–±–ª–æ–Ω ${templateName} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            return `<div class="error">–®–∞–±–ª–æ–Ω ${templateName} –Ω–µ –Ω–∞–π–¥–µ–Ω</div>`;
        }

        let html = this.templates[templateName];
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–ª–æ–∫–æ–≤ {{#each}}...{{/each}} - –î–û–õ–ñ–ù–ê –ë–´–¢–¨ –ü–ï–†–í–û–ô
        html = html.replace(/\{\{#each (\w+)\}\}(.*?)\{\{\/each\}\}/gs, (match, arrayName, content) => {
            const array = data[arrayName] || [];
            if (!Array.isArray(array)) {
                console.warn(`{{#each ${arrayName}}} - –Ω–µ –º–∞—Å—Å–∏–≤`);
                return '';
            }
            return array.map(item => {
                return content.replace(/\{\{([^{}]+)\}\}/g, (m, key) => {
                    return this.getNestedValue(item, key.trim()) || '';
                });
            }).join('');
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Å—Ç–∏—á–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ {{> partial}}
        html = html.replace(/\{\{> ([^{}]+)\}\}/g, (match, partialName) => {
            const templateKey = `${partialName.trim()}.html`;
            return this.templates[templateKey] || `<!-- –®–∞–±–ª–æ–Ω ${partialName} –Ω–µ –Ω–∞–π–¥–µ–Ω -->`;
        });

        // –ó–∞–º–µ–Ω–∞ –ø—Ä–æ—Å—Ç—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö {{variable}}
        html = html.replace(/\{\{([^{}]+)\}\}/g, (match, key) => {
            return this.getNestedValue(data, key.trim()) || '';
        });

        return html;
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–≤–æ–π—Å—Ç–≤
    getNestedValue(obj, path) {
        return path.split('.').reduce((current, key) => {
            return current && current[key] !== undefined ? current[key] : '';
        }, obj);
    }

    // –°–±–æ—Ä–∫–∞ –ø–æ–ª–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    async buildPage(pageData) {
        try {
            await this.loadTemplates();
            
            // –°–æ–±–∏—Ä–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            const sidebarHTML = this.renderTemplate('sidebar.html', pageData);
            const contentHTML = this.renderTemplate('content.html', pageData);
            
            // –°–æ–±–∏—Ä–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            const fullHTML = this.renderTemplate('base.html', {
                ...pageData,
                sidebar: sidebarHTML,
                content: contentHTML
            });

            // ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–º–µ–Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            this.replacePageContent(fullHTML);
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', error);
            this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã');
        }
    }

    // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–º–µ–Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    replacePageContent(html) {
        document.documentElement.innerHTML = html;
        
        // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–æ–≤ –ø–æ—Å–ª–µ –∑–∞–º–µ–Ω—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        this.reinitializeScripts();
    }

    // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–æ–≤
    reinitializeScripts() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Split.js
        if (typeof Split !== 'undefined') {
            Split(['#sidebar', '#content'], {
                sizes: [15, 85],
                minSize: 100
            });
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
        this.initializeEventHandlers();
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    initializeEventHandlers() {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        document.addEventListener('click', (e) => {
            const link = e.target.closest('[data-page]');
            if (link) {
                e.preventDefault();
                const pageId = link.getAttribute('data-page');
                this.loadPage(pageId);
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è/—Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –¥–µ—Ä–µ–≤–∞
            if (e.target.type === 'checkbox') {
                const parentLi = e.target.closest('li');
                if (parentLi) {
                    parentLi.classList.toggle('expanded', e.target.checked);
                }
            }
        });
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É
    showError(message) {
        document.body.innerHTML = `
            <div style="padding: 20px; text-align: center; color: #d00;">
                <h2>–û—à–∏–±–∫–∞</h2>
                <p>${message}</p>
                <button onclick="location.reload()">–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å</button>
            </div>
        `;
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    async loadPage(pageId) {
        try {
            console.log(`–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${pageId}`);
            
            const response = await fetch(`${this.dataBasePath}pages/${pageId}.json`);
            if (!response.ok) throw new Error(`HTTP ${response.status}`);
            
            const pageData = await response.json();
            await this.buildPage(pageData);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º URL –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
            window.history.pushState({}, '', `?page=${pageId}`);
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', error);
            this.showError(`–°—Ç—Ä–∞–Ω–∏—Ü–∞ "${pageId}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        }
    }
}

// üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', () => {
    const pageBuilder = new PageBuilder();
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –Ω–∞–∑–∞–¥/–≤–ø–µ—Ä–µ–¥
    window.addEventListener('popstate', () => {
        const urlParams = new URLSearchParams(window.location.search);
        const pageId = urlParams.get('page') || 'main';
        pageBuilder.loadPage(pageId);
    });
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑ URL
    const urlParams = new URLSearchParams(window.location.search);
    const pageId = urlParams.get('page') || 'main';
    
    pageBuilder.loadPage(pageId);
});

// –ü—Ä–∏–º–µ—Ä —É–ø—Ä–æ—â–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const samplePageData = {
    title: "–ì–æ–≤–æ—Ä–æ–≤ –ê–Ω–¥—Ä–µ–π –°–µ—Ä–≥–µ–µ–≤–∏—á - –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ",
    pageTitle: "–û–±–æ –º–Ω–µ",
    sections: [
        {
            header: {
                anchor: "about",
                number: "1",
                title: "–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
            },
            table: {
                rows: [
                    {
                        label: "–ò–º—è",
                        content: "<p>–ê–Ω–¥—Ä–µ–π –ì–æ–≤–æ—Ä–æ–≤</p>"
                    },
                    {
                        label: "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è", 
                        content: "<p>–°–∏—Å—Ç–µ–º–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫</p>"
                    }
                ]
            }
        }
    ]
};